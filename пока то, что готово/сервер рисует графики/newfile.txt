File: initialization.py
import json


def init():
    init_data = {
        "input_parameters": {
            'n_ext': {'type': 'string', 'discription': 'Enter the refractive index of the external environment in the format 1+2j: \n'},
            'num_of_layers': {'type': 'int', 'discription': 'Enter the number of layers in the unit cell: \n'},
            'num_of_blocks': {'type': 'int', 'discription': 'Enter the number of elementary cells in the structure: \n'},
            'layers_parameters': {'type': 'list',
                                  'discription': 'a list (or array) of the size num_of_layers of pairs [string n, float d], where n is the refractive index of the layer (in the format 1+2 j), d is the thickness of the layer (in nanometers): \n',
                                  'size':'num_of_layers'},
            'wl_start': {'type': 'float',
                         'discription': 'Enter the left border of the displayed wavelength range in nm: \n'},
            'wl_stop': {'type': 'float',
                        'discription': 'Enter the right border of the displayed wavelength range in nm: \n'}
        },
        "output_options": {'spectrum_type': ['R', 'T']}
    }

    with open("temp\\init.json", "w") as file:
        json.dump(init_data, file, indent=2)


File: transfer_matrix_with_init.py
import numpy as np
import matplotlib.pyplot as plt
import json

"""

Структура входных данных:

complex n_ext - показатель преломления внешней среды
int num_of_layers - количество слоев в элементарной ячейке
int num_of_blocks - количество элементарных ячеек в структуре
layers_parameters - список (или массив) размера num_of_layers из пар чисел [complex n, float d], где
                    n - показатель преломления слоя, d - толщина слоя (в нанометрах)
float wl_start и wl_stop - границы отображаемого диапазона длин волн в нм

Все передается в виде .json файла
Выход:

График зависимости коэффициента пропускания (либо отражения, для этого нужно заменить T_data на R_data в 102 строке)
от длины волны падающего (ортогонально) излучения

Примечание: 

В приницпе можно внести во входные данные параметр, определяющий, какой именно спектр (R(w) или T(w)) нас интересует

"""


def layer_matrix(n_layer, d_layer, wl):
    m = np.zeros((2, 2), 'complex')
    m[0, 0] = np.cos(2 * np.pi * n_layer / wl * d_layer)
    m[0, 1] = (np.sin(2 * np.pi * n_layer / wl * d_layer) / n_layer) * 1j
    m[1, 0] = (np.sin(2 * np.pi * n_layer / wl * d_layer) * n_layer) * 1j
    m[1, 1] = np.cos(2 * np.pi * n_layer / wl * d_layer)
    return m


# построим матрицу переноса через блок
def block_matrix(wl):
    m = layer_matrix(layers_parameters[layers - 1][0], layers_parameters[layers - 1][1], wl)
    for k in reversed(range(layers - 1)):
        m = np.dot(m, layer_matrix(layers_parameters[k][0], layers_parameters[k][1], wl))
        return m


# построим матрицу переноса через всю структуру

def S(wavelen):
    m = np.linalg.matrix_power(block_matrix(wavelen), blocks)
    return m


# построим спектры пропускания и отражения
def run():
    with open("temp\\input_data.json", "r") as file:
        input_data = json.load(file)

    n_ext = complex(input_data['n_ext'])

    global layers
    layers = input_data['num_of_layers']
    global blocks
    blocks = input_data['num_of_blocks']

    global layers_parameters
    layers_parameters = []

    for [eps, d] in input_data['layers_parameters']:
        layers_parameters.append([complex(eps), d * 1e-9])

    wl_start = input_data['wl_start']
    wl_stop = input_data['wl_stop']
    output_option = input_data['output_option']

    # print("  Мы в ядре")
    # print("  Полученные данные")
    # print(f"  {n_ext = }")
    # print(f"  {layers = }")
    # print(f"  {blocks = }")
    # print(f"  {wl_start = }, {wl_stop = }")
    # print('  layers parameters:')
    # for i,[eps, d] in enumerate(layers_parameters):
    #     print(f"  {i+1}. {eps = :.2f}, {d = :.2f}")
    # print()

    R = lambda l: abs((S(l)[0][1] * n_ext ** 2 + (S(l)[0][0] - S(l)[1][1]) * n_ext - S(l)[1][0]) / (
            S(l)[0][1] * n_ext ** 2 - (S(l)[0][0] + S(l)[1][1]) * n_ext + S(l)[1][0])) ** 2

    T = lambda l: abs((2 * n_ext) / (S(l)[0][1] * n_ext ** 2 - (S(l)[0][0] + S(l)[1][1]) * n_ext + S(l)[1][0])) ** 2

    wl_data = np.linspace(wl_start, wl_stop, 1001)
    x_data = list(wl_data)
    match output_option:
        case 'R':
            R_data = list(map(R, wl_data * 1e-9))
            output = {'x': x_data, 'y': R_data}
        case 'T':
            T_data = list(map(T, wl_data * 1e-9))
            output = {'x': x_data, 'y': T_data}

    with open("temp\\output.json", "w") as file:
        json.dump(output, file, indent=2)

# plt.figure()
# plt.plot(wl_data, T_data, color='purple')
# plt.title('Спектр пропускания слоистой структуры')
# plt.xlabel('Длина волны, нм')
# plt.ylabel('Коэффициент пропускания')
# plt.grid()
# plt.show()
File: user_interface.py
# -*- coding: utf8 -*-
import json
import initialization
import time
import matplotlib.pyplot as plt
import transfer_matrix_with_init
import os

initialization.init()
folder_path = "C:\\Users\\Тимур\\Transfer_Matrix\\temp"

def set_type(type: str, val: str):
    match type:
        case 'string':
            return val
        case 'int':
            return int(val)
        case 'float':
            return float(val)

def clear_temp():
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f'Ошибка при удалении файла {file_path}. {e}')


"""Чтобы не вводить параметры вручную"""

n_list = ['1.46', '2.2+0.001j']
d_list = [120, 80]
dict_of_values = {'n_ext': '1', 'num_of_layers': 2, 'num_of_blocks': 8, 'wl_start': 400, 'wl_stop': 1400}

"""Открываем файл с параметрами инициализации"""

with open("init.json", "r") as file:
    init_data = json.load(file)

"""Анализируем входные параметры"""

data = init_data['input_parameters'].copy()
input_parameters = init_data['input_parameters'].copy()

for key in input_parameters:
    if input_parameters[key]['type'] == 'list':
        size = input_parameters[key]['size']
        list = []
        for i in range(data[size]):
            # n = input()
            # d = float(input())
            n = n_list[i]
            d = d_list[i]
            print(n, d)
            time.sleep(0.3)
            list.append([n, d])
        data[key] = list
    else:
        # value = input(input_parameters[key]['discription'])
        print(input_parameters[key]['discription'], end=' ')
        value = dict_of_values[key]
        data[key] = set_type(input_parameters[key]['type'], value)
        print(value)
        time.sleep(0.3)

print("-" * 30)
print(data)

"""Обрабатываем параметры выхода"""

for key in init_data['output_options']:
    variants = init_data['output_options'][key]
    print(f'Выберите одну из опций: {variants}')

    # output_option = input(f'Выберите одну из опций: {variants} \n')
    # output_option = 'T'

    output_option = "T"
    time.sleep(0.1)
    print(output_option)
    match output_option:
        case 'R':
            title = "Спектр отражения слоистой структуры"
            label = "Коэффициент отражения"
        case 'T':
            title = "Спектр пропускания слоистой структуры"
            label = "Коэффициент пропускания"

data['output_option'] = output_option

"""Отправляем вход на ядро"""

with open("temp\\input_data.json", "w") as file:
    json.dump(data, file, indent=2)

transfer_matrix_with_init.run()

"""Получаем выход с ядра"""

with open("temp\\output.json", "r") as file:
    output_data = json.load(file)

"""Отрисовываем выход"""

plt.figure()
plt.plot(output_data['x'], output_data['y'], color='purple')
plt.title(title)
plt.xlabel('Длина волны, нм')
plt.ylabel(label)
plt.grid()
plt.show()

clear_temp()