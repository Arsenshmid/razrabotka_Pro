File: server.py
import socket
import numpy as np
import matplotlib.pyplot as plt
import base64
import io

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

host = "127.0.0.1"
port = 12345
server_socket.bind((host, port))
server_socket.listen(1)

while True:
    client_socket, client_address = server_socket.accept()

    try:
        data = client_socket.recv(1024).decode('utf-8')
        if not data:
            break

        values = data.split(',')
        n_ext = float(values[0])
        layers = int(values[1])

        print(f"Вы ввели: {data}")

        wl_data = np.linspace(400, 800, 1001)
        T_data = np.random.rand(1001)
        plt.figure()
        plt.plot(wl_data, T_data, color='purple')
        plt.title('Спектр пропускания слоистой структуры')
        plt.xlabel('Длина волны, нм')
        plt.ylabel('Коэффициент пропускания')
        plt.grid()
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png')
        plt.close()
        image_data = base64.b64encode(buffer.getvalue()).decode()

        client_socket.send(image_data.encode('utf-8'))

    finally:
        client_socket.close()
File: main.js
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const net = require('net');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  mainWindow.loadFile('index.html');
}

app.whenReady().then(() => {
  createWindow();

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});

ipcMain.on('submit-data', (event, data) => {
  // Отправляем данные на Python-сервер через сокет
  const client = new net.Socket();
  client.connect(12345, '127.0.0.1', () => {
    client.write(data);
    client.end();
  });
});
File: renderer.js
const { ipcRenderer } = require('electron');

document.getElementById('data-form').addEventListener('submit', (e) => {
  e.preventDefault();
  
  const data = document.getElementById('data-input').value;
  
  ipcRenderer.send('submit-data', data);
});


ipcRenderer.on('display-plot', (event, plotData) => {
 
  document.getElementById('plot-container').innerHTML = '';
  
  
  const img = document.createElement('img');
  img.src = `data:image/png;base64,${plotData}`;
  
  
  document.getElementById('plot-container').appendChild(img);
});
File: t.py
import numpy as np
import matplotlib.pyplot as plt

print('Введите значение показателя преломления внешней среды: ')
n_ext = float(input())

print('Введите количество слоев в блоке: ')
layers = int(input())

layers_parameters = []
for i in range(layers):
    n_layer = float(input(f'Введите показатель преломления {i + 1}-го слоя: '))
    d_layer = float(input(f'Введите толщину {i + 1}-го слоя в метрах: ')) * 10**(-9)
    layers_parameters.append([n_layer, d_layer])

print('Введите количество блоков в структуре: ')
blocks = int(input())

print('Введите начальную границу диапазона длин волн (в нм): ')
wl_start = float(input())

print('Введите конечную границу диапазона длин волн (в нм): ')
wl_stop = float(input())

def layer_matrix(n_layer, d_layer, wl):
    m = np.zeros((2, 2), 'complex')
    m[0, 0] = np.cos(2 * np.pi * n_layer / wl * d_layer)
    m[0, 1] = (np.sin(2 * np.pi * n_layer / wl * d_layer) / n_layer) * 1j
    m[1, 0] = (np.sin(2 * np.pi * n_layer / wl * d_layer) * n_layer) * 1j
    m[1, 1] = np.cos(2 * np.pi * n_layer / wl * d_layer)
    return m

def block_matrix(wl):
    m = layer_matrix(layers_parameters[layers - 1][0], layers_parameters[layers - 1][1], wl)
    for k in reversed(range(layers - 1)):
        m = np.dot(m, layer_matrix(layers_parameters[k][0], layers_parameters[k][1], wl))
    return m

def S(wavelen):
    m = np.linalg.matrix_power(block_matrix(wavelen), blocks)
    return m

def R(l):
    return abs((S(l)[0][1] * n_ext ** 2 + (S(l)[0][0] - S(l)[1][1]) * n_ext - S(l)[1][0]) / (
            S(l)[0][1] * n_ext ** 2 - (S(l)[0][0] + S(l)[1][1]) * n_ext + S(l)[1][0])) ** 2

def T(l):
    return abs((2 * n_ext) / (S(l)[0][1] * n_ext ** 2 - (S(l)[0][0] + S(l)[1][1]) * n_ext + S(l)[1][0])) ** 2

wl_data = np.linspace(wl_start, wl_stop, 1001)

T_data = list(map(T, wl_data*1e-9))
R_data = list(map(R, wl_data*1e-9))

plt.figure()
plt.plot(wl_data, T_data, color='purple')
plt.title('Спектр пропускания слоистой структуры')
plt.xlabel('Длина волны, нм')
plt.ylabel('Коэффициент пропускания')
plt.grid()
plt.show()
File: index.html
<!DOCTYPE html>
<html>
<body>
  <form id="data-form">
    <input type="text" id="data-input" placeholder="Введите данные для графика">
    <button type="submit">Построить график</button>
  </form>
  <div id="plot-container"></div> <!-- Этот контейнер будет содержать график -->
  <script src="renderer.js"></script>
</body>
</html>
File: renderer.js
const { ipcRenderer } = require('electron');

document.getElementById('data-form').addEventListener('submit', (e) => {
  e.preventDefault();
  
  const data = document.getElementById('data-input').value;
  
  ipcRenderer.send('submit-data', data);
});


ipcRenderer.on('display-plot', (event, plotData) => {

  document.getElementById('plot-container').innerHTML = '';
  
  
  const img = document.createElement('img');
  img.src = `data:image/png;base64,${plotData}`;
  
 
  document.getElementById('plot-container').appendChild(img);
});
